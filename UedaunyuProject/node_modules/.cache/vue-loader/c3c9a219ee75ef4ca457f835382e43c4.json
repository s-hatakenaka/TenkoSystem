{"remainingRequest":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\仕事\\TenkoSystem\\UedaunyuProject\\src\\components\\IncrementSearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\src\\components\\IncrementSearch.vue","mtime":1603716298000},{"path":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1603716214000},{"path":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\node_modules\\babel-loader\\lib\\index.js","mtime":1603716210000},{"path":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1603716214000},{"path":"G:\\仕事\\TenkoSystem\\UedaunyuProject\\node_modules\\vue-loader\\lib\\index.js","mtime":1603716292000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport search from '@/js/search/autocomplete.js'\nimport exsist from '@/js/status/exsist.js'\nimport array from '@/js/array/key_change.js'\nimport url from '@/js/api_url.js'\n\n\nexport default {\n    name: 'el-increment-search',\n    model: {\n        prop: 'code',\n        event: \"change\",\n    },\n    props: {\n        code: {\n            type: String,\n        },\n        autoComplete: {\n            type: Array,\n        },\n        display: {\n            type:Array,\n        },\n        required: {\n            type: Boolean,\n        },\n        kind: {\n            type: String,\n        },\n        disabled: {\n            type: Boolean,\n        },\n        autofocus: {\n            type: Boolean,\n        }\n    },\n    data: function () {\n\n        return {\n            data: { code: null },\n            autoCompleteData: {},\n            querySearchData: [\n            ],\n            placeholder: null,\n            message: {\n                error: \"\",\n            }\n        }\n    },\n    methods: {\n        querySearch: function (queryString, cb) {\n\n            var list = this.querySearchData;\n            var results = queryString ? list.filter(search.createSearchFilter(queryString, \"value\")) : list;\n            // call callback function to return suggestions\n            cb(results);\n        },\n        autocompleteSelect: function (item) {\n\n            for (var i in this.autoComplete) {\n\n                this.autoCompleteData[this.autoComplete[i]] = item[this.autoComplete[i]];\n            }\n\n            this.$emit('change', item.value)\n            this.$emit('update', this.autoCompleteData);\n\n\n        },\n        autocompleteChange: function (value) {\n\n            if (value == \"\") {\n\n                for (var i in this.autoComplete) {\n\n                    this.autoCompleteData[this.autoComplete[i]] = \"\";\n                }\n\n                this.$emit('change', \"\")\n                this.$emit('update', this.autoCompleteData);\n\n\n\n                return false;\n            }\n\n            var result = exsist.is_exsist_by_object_value(value, this.querySearchData, \"value\");\n\n            if (!result) {\n\n                if (this.required) {\n                    alert(this.message.error);\n\n                    for (var i in this.autoComplete) {\n\n                        this.autoCompleteData[this.autoComplete[i]] = \"\";\n                    }\n\n                    this.$emit('change', \"\")\n                    this.$emit('update', this.autoCompleteData);\n\n\n\n                }\n\n                return false;\n            }\n\n            for (var i in this.autoComplete) {\n\n                this.autoCompleteData[this.autoComplete[i]] = result[this.autoComplete[i]];\n            }\n\n            this.$emit('change', value)\n\n            this.$emit('update', this.autoCompleteData);\n\n\n\n        },\n        createValueKey: function (array,codeKey) {\n          \n            for (var i in array) {\n                array[i].value = String(array[i][codeKey]);\n            }\n\n        }\n\n    },\n    created: function () {\n        //今は定数データを入れているがサーバーからaxiosでデータを取ってくる\n\n        if (this.kind == \"商品\") {\n            this.placeholder = \"商品コード\"\n            this.message.error = \"入力したコードの商品は存在しません\";\n\n\n\n\n            axios.get(url.syouhinMaster)\n                .then(response => {\n\n\n                    array.createValueKey(response.data, \"syohinCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    console.log(this.querySearchData);\n\n                })\n                .catch(response => console.log(response))\n\n\n            \n\n        }\n\n    \n        if (this.kind == \"生産者\") {\n            this.placeholder = \"生産者コード\"\n          this.message.error = \"入力したコードの生産者は存在しません\";\n\n            axios.get(url.seisansyaMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"seisansyacd\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"品種\") {\n            this.placeholder = \"品種コード\"\n           this.message.error = \"入力したコードの品種は存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"三社\" },\n                { code: \"1\", name: \"平核\" },\n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n        if (this.kind == \"等級\") {\n            this.placeholder = \"等級コード\"\n            this.message.error = \"入力したコードの等級は存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"上\" },\n                { code: \"99\", name: \"特上\" },\n                { code: \"2\", name: \"中\" },\n                { code: \"3\", name: \"下\" },\n                { code: \"4\", name: \"特下\" },\n\n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n        if (this.kind == \"支所\") {\n            this.placeholder = \"支所コード\"\n            this.message.error = \"入力したコードの支所は存在しません\";\n\n            axios.get(url.shisyoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shisyoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n        }\n\n\n               if (this.kind == \"サイズ\") {\n            this.placeholder = \"サイズコード\"\n            this.message.error = \"入力したコードのサイズは存在しません\";\n\n            var data = [\n                { code: \"0\", name: \"S\" },\n                { code: \"1\", name: \"L\" },\n                { code: \"2\", name: \"M\" },\n            \n            ];\n\n            //codeの部分は本番環境のコードのキーに変える\n            this.createValueKey(data, \"code\");\n\n            this.querySearchData = data;\n\n        }\n\n\n        if (this.kind == \"市場\") {\n            this.placeholder = \"市場コード\"\n            this.message.error = \"入力したコードの市場は存在しません\";\n\n\n            axios.get(url.shijoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shijyoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n       \n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"部門\") {\n            this.placeholder = \"部門コード\"\n            this.message.error = \"入力したコードの部門は存在しません\";\n\n            axios.get(url.bumonMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"bumoncd\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                })\n                .catch(response => console.log(response))\n\n        }\n\n        if (this.kind == \"包装\") {\n            this.placeholder = \"包装コード\"\n            this.message.error = \"入力したコードの包装は存在しません\";\n\n            axios.get(url.hosoMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"hosoCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n        if (this.kind == \"地区\") {\n            this.placeholder = \"地区コード\"\n            this.message.error = \"入力したコードの地区は存在しません\";\n\n            axios.get(url.chikuMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"chikuCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n\n        if (this.kind == \"資材\") {\n            this.placeholder = \"資材コード\"\n            this.message.error = \"入力したコードの資材は存在しません\";\n\n            axios.get(url.shizaiMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"shizaiCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n                    this.data.code = this.code;\n\n                    console.log(this.querySearchData);\n\n                    if (this.code != \"\") {\n\n                        this.autocompleteChange(this.data.code);\n                    }\n\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n        if (this.kind == \"運賃\") {\n            this.placeholder = \"運賃コード\"\n            this.message.error = \"入力したコードの運賃は存在しません\";\n\n            axios.get(url.unchinMaster)\n                .then(response => {\n\n                    array.createValueKey(response.data, \"unchinCD\", \"string\");\n\n                    this.querySearchData = response.data;\n\n\n                    console.log(this.querySearchData);\n\n                })\n                .catch(response => console.log(response))\n\n\n        }\n\n\n\n    \n    },\n    mounted: function () {\n\n    },\n    watch: {\n        'code': function () {\n            this.data.code = this.code;\n\n\n          }\n\n    },\n}\n",{"version":3,"sources":["IncrementSearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;;;;AAKA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA","file":"IncrementSearch.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n        <el-autocomplete style='width:30%; margin-right:2%;'\r\n                         v-model=\"data.code\"\r\n                         :fetch-suggestions=\"querySearch\"\r\n                         :placeholder=\"placeholder\"\r\n                         :disabled=\"disabled\"\r\n                         :autofocus=\"autofocus\"\r\n                         @select=\"autocompleteSelect\"\r\n                         @change=\"autocompleteChange\">\r\n            <template slot-scope=\"{ item }\">\r\n                <div style=\"border-top:solid 0.5px lightgray;\">コード:{{ item.value }}</div>\r\n                <div v-for=\"display in display\">{{display.name}}:{{ item[display.key] }}</div>\r\n                <div ></div>\r\n            </template>\r\n        </el-autocomplete>\r\n</template>\r\n\r\n<script>\r\n    import search from '@/js/search/autocomplete.js'\r\n    import exsist from '@/js/status/exsist.js'\r\n    import array from '@/js/array/key_change.js'\r\n    import url from '@/js/api_url.js'\r\n\r\n\r\n    export default {\r\n        name: 'el-increment-search',\r\n        model: {\r\n            prop: 'code',\r\n            event: \"change\",\r\n        },\r\n        props: {\r\n            code: {\r\n                type: String,\r\n            },\r\n            autoComplete: {\r\n                type: Array,\r\n            },\r\n            display: {\r\n                type:Array,\r\n            },\r\n            required: {\r\n                type: Boolean,\r\n            },\r\n            kind: {\r\n                type: String,\r\n            },\r\n            disabled: {\r\n                type: Boolean,\r\n            },\r\n            autofocus: {\r\n                type: Boolean,\r\n            }\r\n        },\r\n        data: function () {\r\n\r\n            return {\r\n                data: { code: null },\r\n                autoCompleteData: {},\r\n                querySearchData: [\r\n                ],\r\n                placeholder: null,\r\n                message: {\r\n                    error: \"\",\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            querySearch: function (queryString, cb) {\r\n\r\n                var list = this.querySearchData;\r\n                var results = queryString ? list.filter(search.createSearchFilter(queryString, \"value\")) : list;\r\n                // call callback function to return suggestions\r\n                cb(results);\r\n            },\r\n            autocompleteSelect: function (item) {\r\n\r\n                for (var i in this.autoComplete) {\r\n\r\n                    this.autoCompleteData[this.autoComplete[i]] = item[this.autoComplete[i]];\r\n                }\r\n\r\n                this.$emit('change', item.value)\r\n                this.$emit('update', this.autoCompleteData);\r\n\r\n\r\n            },\r\n            autocompleteChange: function (value) {\r\n\r\n                if (value == \"\") {\r\n\r\n                    for (var i in this.autoComplete) {\r\n\r\n                        this.autoCompleteData[this.autoComplete[i]] = \"\";\r\n                    }\r\n\r\n                    this.$emit('change', \"\")\r\n                    this.$emit('update', this.autoCompleteData);\r\n\r\n\r\n\r\n                    return false;\r\n                }\r\n\r\n                var result = exsist.is_exsist_by_object_value(value, this.querySearchData, \"value\");\r\n\r\n                if (!result) {\r\n\r\n                    if (this.required) {\r\n                        alert(this.message.error);\r\n\r\n                        for (var i in this.autoComplete) {\r\n\r\n                            this.autoCompleteData[this.autoComplete[i]] = \"\";\r\n                        }\r\n\r\n                        this.$emit('change', \"\")\r\n                        this.$emit('update', this.autoCompleteData);\r\n\r\n\r\n\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                for (var i in this.autoComplete) {\r\n\r\n                    this.autoCompleteData[this.autoComplete[i]] = result[this.autoComplete[i]];\r\n                }\r\n\r\n                this.$emit('change', value)\r\n\r\n                this.$emit('update', this.autoCompleteData);\r\n\r\n\r\n\r\n            },\r\n            createValueKey: function (array,codeKey) {\r\n              \r\n                for (var i in array) {\r\n                    array[i].value = String(array[i][codeKey]);\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        created: function () {\r\n            //今は定数データを入れているがサーバーからaxiosでデータを取ってくる\r\n\r\n            if (this.kind == \"商品\") {\r\n                this.placeholder = \"商品コード\"\r\n                this.message.error = \"入力したコードの商品は存在しません\";\r\n\r\n\r\n\r\n\r\n                axios.get(url.syouhinMaster)\r\n                    .then(response => {\r\n\r\n\r\n                        array.createValueKey(response.data, \"syohinCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n                        console.log(this.querySearchData);\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n                \r\n\r\n            }\r\n\r\n        \r\n            if (this.kind == \"生産者\") {\r\n                this.placeholder = \"生産者コード\"\r\n              this.message.error = \"入力したコードの生産者は存在しません\";\r\n\r\n                axios.get(url.seisansyaMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"seisansyacd\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n \r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n            if (this.kind == \"品種\") {\r\n                this.placeholder = \"品種コード\"\r\n               this.message.error = \"入力したコードの品種は存在しません\";\r\n\r\n                var data = [\r\n                    { code: \"0\", name: \"三社\" },\r\n                    { code: \"1\", name: \"平核\" },\r\n                ];\r\n\r\n                //codeの部分は本番環境のコードのキーに変える\r\n                this.createValueKey(data, \"code\");\r\n\r\n                this.querySearchData = data;\r\n\r\n            }\r\n\r\n            if (this.kind == \"等級\") {\r\n                this.placeholder = \"等級コード\"\r\n                this.message.error = \"入力したコードの等級は存在しません\";\r\n\r\n                var data = [\r\n                    { code: \"0\", name: \"上\" },\r\n                    { code: \"99\", name: \"特上\" },\r\n                    { code: \"2\", name: \"中\" },\r\n                    { code: \"3\", name: \"下\" },\r\n                    { code: \"4\", name: \"特下\" },\r\n\r\n                ];\r\n\r\n                //codeの部分は本番環境のコードのキーに変える\r\n                this.createValueKey(data, \"code\");\r\n\r\n                this.querySearchData = data;\r\n\r\n            }\r\n\r\n            if (this.kind == \"支所\") {\r\n                this.placeholder = \"支所コード\"\r\n                this.message.error = \"入力したコードの支所は存在しません\";\r\n\r\n                axios.get(url.shisyoMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"shisyoCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n                        this.data.code = this.code;\r\n\r\n                        if (this.code != \"\") {\r\n\r\n                            this.autocompleteChange(this.data.code);\r\n                        }\r\n\r\n    \r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n            }\r\n\r\n\r\n                   if (this.kind == \"サイズ\") {\r\n                this.placeholder = \"サイズコード\"\r\n                this.message.error = \"入力したコードのサイズは存在しません\";\r\n\r\n                var data = [\r\n                    { code: \"0\", name: \"S\" },\r\n                    { code: \"1\", name: \"L\" },\r\n                    { code: \"2\", name: \"M\" },\r\n                \r\n                ];\r\n\r\n                //codeの部分は本番環境のコードのキーに変える\r\n                this.createValueKey(data, \"code\");\r\n\r\n                this.querySearchData = data;\r\n\r\n            }\r\n\r\n\r\n            if (this.kind == \"市場\") {\r\n                this.placeholder = \"市場コード\"\r\n                this.message.error = \"入力したコードの市場は存在しません\";\r\n\r\n\r\n                axios.get(url.shijoMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"shijyoCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n           \r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n            if (this.kind == \"部門\") {\r\n                this.placeholder = \"部門コード\"\r\n                this.message.error = \"入力したコードの部門は存在しません\";\r\n\r\n                axios.get(url.bumonMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"bumoncd\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n            }\r\n\r\n            if (this.kind == \"包装\") {\r\n                this.placeholder = \"包装コード\"\r\n                this.message.error = \"入力したコードの包装は存在しません\";\r\n\r\n                axios.get(url.hosoMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"hosoCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n                        this.data.code = this.code;\r\n\r\n                        if (this.code != \"\") {\r\n\r\n                            this.autocompleteChange(this.data.code);\r\n                        }\r\n\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n            if (this.kind == \"地区\") {\r\n                this.placeholder = \"地区コード\"\r\n                this.message.error = \"入力したコードの地区は存在しません\";\r\n\r\n                axios.get(url.chikuMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"chikuCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n                        this.data.code = this.code;\r\n\r\n                        if (this.code != \"\") {\r\n\r\n                            this.autocompleteChange(this.data.code);\r\n                        }\r\n\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            if (this.kind == \"資材\") {\r\n                this.placeholder = \"資材コード\"\r\n                this.message.error = \"入力したコードの資材は存在しません\";\r\n\r\n                axios.get(url.shizaiMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"shizaiCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n                        this.data.code = this.code;\r\n\r\n                        console.log(this.querySearchData);\r\n\r\n                        if (this.code != \"\") {\r\n\r\n                            this.autocompleteChange(this.data.code);\r\n                        }\r\n\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n\r\n            if (this.kind == \"運賃\") {\r\n                this.placeholder = \"運賃コード\"\r\n                this.message.error = \"入力したコードの運賃は存在しません\";\r\n\r\n                axios.get(url.unchinMaster)\r\n                    .then(response => {\r\n\r\n                        array.createValueKey(response.data, \"unchinCD\", \"string\");\r\n\r\n                        this.querySearchData = response.data;\r\n\r\n\r\n                        console.log(this.querySearchData);\r\n\r\n                    })\r\n                    .catch(response => console.log(response))\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        \r\n        },\r\n        mounted: function () {\r\n\r\n        },\r\n        watch: {\r\n            'code': function () {\r\n                this.data.code = this.code;\r\n\r\n\r\n              }\r\n   \r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}